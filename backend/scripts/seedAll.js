require('dotenv').config();
const mongoose = require('mongoose');
const Category = require('../src/models/Category');
const Product  = require('../src/models/Product');

(async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || process.env.MONGO_URI);
    console.log('‚úÖ Connected Mongo');

    // 1) X√ìA D·ªÆ LI·ªÜU C≈®
    await Promise.all([
      Product.deleteMany({}),
      Category.deleteMany({}),
    ]);
    console.log('üßπ ƒê√£ xo√° products & categories c≈©');

    // 2) T·∫†O CATEGORIES (root tr∆∞·ªõc, r·ªìi children)
    const roots = await Category.insertMany([
      { name: 'Qu√† T·∫øt',        slug: 'qua-tet' },
      { name: 'Qu√† Sinh Nh·∫≠t',  slug: 'qua-sinh-nhat' },
      { name: 'Qu√† Valentine',  slug: 'qua-valentine' },
      { name: 'Qu√† Doanh Nghi·ªáp', slug: 'qua-doanh-nghiep' },
    ]);

    const bySlug = Object.fromEntries(roots.map(c => [c.slug, c]));

    const children = await Category.insertMany([
      { name: 'Gi·ªè qu√† t·ªïng h·ª£p', slug: 'gio-qua-tong-hop', parentId: bySlug['qua-tet']._id },
      { name: 'B√°nh k·∫πo',         slug: 'banh-keo',         parentId: bySlug['qua-tet']._id },
      { name: 'Tr√† - C√† ph√™',     slug: 'tra-ca-phe',       parentId: bySlug['qua-tet']._id },
      { name: 'Socola',           slug: 'socola',           parentId: bySlug['qua-valentine']._id },
      { name: 'Hoa t∆∞∆°i',         slug: 'hoa-tuoi',         parentId: bySlug['qua-sinh-nhat']._id },
      { name: 'H·ªôp r∆∞·ª£u',         slug: 'hop-ruou',         parentId: bySlug['qua-doanh-nghiep']._id },
    ]);

    const allCats = [...roots, ...children];
    const catId = (slug) => allCats.find(c => c.slug === slug)._id;

    console.log('üå≥ ƒê√£ seed categories');

    // 3) T·∫†O PRODUCTS (g·∫Øn categoryId chu·∫©n)
    await Product.insertMany([
      {
        ten: 'Chocolate h·ªôp tim',
        gia: 120000,
        hinhAnh: ['https://example.com/choco-heart.jpg'],
        categoryId: catId('socola'),
        loai: ['chocolate'],
        dip: ['sinhnhat','valentine'],
        doiTuong: ['nu'],
        phongCach: ['langman','sweet'],
        diemPhoBien: 50
      },
      {
        ten: 'Hoa h·ªìng b√≥ nh·ªè',
        gia: 150000,
        hinhAnh: ['https://example.com/hoa-hong.jpg'],
        categoryId: catId('hoa-tuoi'),
        loai: ['flower'],
        dip: ['sinhnhat','valentine'],
        doiTuong: ['nu'],
        phongCach: ['langman'],
        diemPhoBien: 60
      },
      {
        ten: 'Tr√† √¥ long cao c·∫•p',
        gia: 180000,
        hinhAnh: ['https://example.com/tra-olong.jpg'],
        categoryId: catId('tra-ca-phe'),
        loai: ['tea'],
        dip: ['tet','coworker'],
        doiTuong: ['nam','nu'],
        phongCach: ['eco','thanhLich'],
        diemPhoBien: 55
      },
      {
        ten: 'G·∫•u b√¥ng mini',
        gia: 90000,
        hinhAnh: ['https://example.com/gau-bong.jpg'],
        categoryId: catId('qua-sinh-nhat'), // g·∫Øn tr·ª±c ti·∫øp category g·ªëc c≈©ng ƒë∆∞·ª£c
        loai: ['gauBong'],
        dip: ['sinhnhat'],
        doiTuong: ['treem','nu'],
        phongCach: ['deThuong'],
        diemPhoBien: 45
      },
      {
        ten: 'Gi·ªè qu√† T·∫øt cao c·∫•p A',
        gia: 650000,
        hinhAnh: ['https://example.com/gio-qua-a.jpg'],
        categoryId: catId('gio-qua-tong-hop'),
        loai: ['gioQua'],
        dip: ['tet'],
        doiTuong: ['giaDinh','doanhNghiep'],
        phongCach: ['sangtrong'],
        diemPhoBien: 70
      },
    ]);

    console.log('‚úÖ Seed xong (categories + products)');
    await mongoose.connection.close();
    process.exit(0);
  } catch (e) {
    console.error('‚ùå Seed l·ªói:', e);
    process.exit(1);
  }
})();
